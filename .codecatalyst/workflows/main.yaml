SchemaVersion: 1.0

Name: Blog-Application-CICD-Pipeline

Triggers:
  - Type: Push
    Branches:
      - main

Actions:
  # Build Stage
  BuildBackend:
    Identifier: aws/build@v1
    Inputs:
      Sources:
        - WorkflowSource
    Outputs:
        Artifacts:
            - Name: backendimage
              Files:
                - backend:latest
    Configuration:
        Steps:
            - Run: echo "Building backend Docker image..."
            - Run: cd backend
            - Run: docker build -t backend:latest .
            - Run: echo "Backend build completed"

  BuildFrontend:
    Identifier: aws/build@v1
    Inputs:
      Sources:
        - WorkflowSource
    Outputs:
        Artifacts:
            - Name: frontendimage
              Files:
                - frontend:latest
    Configuration:
        Steps:
            - Run: echo "Building frontend Docker image..."
            - Run: cd frontend
            - Run: docker build -t frontend:latest .
            - Run: echo "Frontend build completed"

  # Test Stage
  TestBackend:
    Identifier: aws/managed-test@v1
    DependsOn:
      - BuildBackend
    Inputs:
      Sources:
        - WorkflowSource
    Configuration:
      Steps:
            - Run: echo "Running backend tests..."
            - Run: cd backend
            - Run: pip install -r requirements.txt
            - Run: pytest tests/ -v --cov=app --cov-report=html
            - Run: echo "Backend tests completed"

  TestFrontend:
    Identifier: aws/managed-test@v1
    DependsOn:
      - BuildFrontend
    Inputs:
      Sources:
        - WorkflowSource
    Configuration:
      Steps:
            - Run: echo "Running frontend tests..."
            - Run: cd frontend
            - Run: npm install
            - Run: npm test -- --watchAll=false --coverage
            - Run: echo "Frontend tests completed"

  # Security Scan
  SecurityScan:
    Identifier: aws/managed-test@v1
    DependsOn:
      - BuildBackend
      - BuildFrontend
    Inputs:
      Sources:
        - WorkflowSource
    Configuration:
      Steps:
            - Run: echo "Running security scans..."
            - Run: cd backend
            - Run: pip install bandit safety
            - Run: bandit -r app/ -f json -o bandit-report.json || true
            - Run: safety check --json --output safety-report.json || true
            - Run: cd ../frontend
            - Run: npm audit --audit-level moderate || true
            - Run: echo "Security scans completed"

  # Push to ECR
  PushToECR:
    Identifier: aws/build@v1
    DependsOn:
      - BuildBackend
      - BuildFrontend
      - TestBackend
      - TestFrontend
    Inputs:
      Sources:
        - WorkflowSource
    Configuration:
      Steps:
            - Run: echo "Pushing images to ECR..."
            - Run: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY_URI
            - Run: docker tag backend:latest $ECR_REPOSITORY_URI/backend:latest
            - Run: docker tag frontend:latest $ECR_REPOSITORY_URI/frontend:latest
            - Run: docker push $ECR_REPOSITORY_URI/backend:latest
            - Run: docker push $ECR_REPOSITORY_URI/frontend:latest
            - Run: echo "Images pushed to ECR successfully"

  # Deploy Infrastructure
  DeployInfrastructure:
    Identifier: aws/cfn-deploy@v1
    DependsOn:
      - PushToECR
    Timeout: 15
    Environment:
      Name: production
    Inputs:
      Sources:
        - WorkflowSource
    Artifacts:
        - CloudFormation-artifact
    Configuration:
      name: blog-app-stack
      region: us-west-2
      template: infrastructure/cloudformation/main.yaml
      no-execute-changeset: 0
      fail-on-empty-changeset: 1
      disable-rollback: 1
      termination-protection: 1
      timeout-in-minutes: 15
      monitor-timeout-in-minutes: 15
      tags: '[{"Key":"E","Value":"MyValue1"},{"Key":"MyKey2","Value":"MyValue2"}]'
    
      StackName: blog-app-stack
      TemplateFile: infrastructure/cloudformation/main.yaml
      Capabilities: CAPABILITY_IAM
      Parameters:
        - ParameterKey: Environment
          ParameterValue: production
        - ParameterKey: DatabasePassword
          ParameterValue: ${{ Parameters.DatabasePassword }}
        - ParameterKey: ECRRepositoryUri
          ParameterValue: ${{ Parameters.ECRRepositoryUri }}
      Tags:
        - Key: Environment
          Value: production
        - Key: Application
          Value: blog-app
    Configuration:
        Steps:
            - Run: "Echo publshing to ecr"

  # Deploy Application
  DeployApplication:
    Identifier: aws/build@v1
    DependsOn:
      - DeployInfrastructure
    Inputs:
      Sources:
        - Name: Source
          Repository: Source
          Branch: main
      Steps:
        - Name: DeployApplication
          Commands:
            - echo "Deploying application..."
            - aws ecs update-service --cluster production-blog-cluster --service production-blog-backend-service --force-new-deployment
            - aws ecs update-service --cluster production-blog-cluster --service production-blog-frontend-service --force-new-deployment
            - echo "Application deployment completed"

  # Integration Tests
  IntegrationTests:
    Identifier: aws/managed-test@v1
    DependsOn:
      - DeployApplication
    Inputs:
      Sources:
        - Name: Source
          Repository: Source
          Branch: main
      Steps:
        - Name: IntegrationTests
          Commands:
            - echo "Running integration tests..."
            - pip install requests pytest
            - python -m pytest tests/integration/ -v
            - echo "Integration tests completed"
