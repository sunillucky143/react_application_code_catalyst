SchemaVersion: 1.0

Name: Blog-Application-CICD-Pipeline

Triggers:
  - Type: Push
    Branches:
      - main

Actions:
  # Build Stage
  BuildBackend:
    Identifier: aws/build@v1
    Inputs:
      Sources:
        - WorkflowSource
    Configuration:
        Steps:
            - Run: echo "Building backend Docker image..."
            - Run: cd backend
            - Run: docker build -t backend:latest .
            - Run: echo "Backend build completed"

  BuildFrontend:
    Identifier: aws/build@v1
    Inputs:
      Sources:
        - WorkflowSource
    Configuration:
        Steps:
            - Run: echo "Building frontend Docker image..."
            - Run: cd frontend
            - Run: docker build -t frontend:latest .
            - Run: echo "Frontend build completed"

  # Test Stage
  TestBackend:
    Identifier: aws/managed-test@v1
    DependsOn:
      - BuildBackend
    Inputs:
      Sources:
        - WorkflowSource
    Configuration:
      Steps:
            - Run: echo "Running backend tests..."
            - Run: cd backend
            - Run: pip install -r requirements.txt
            - Run: pytest tests/ -v --cov=app --cov-report=html || echo "Tests completed with warnings"

  TestFrontend:
    Identifier: aws/managed-test@v1
    DependsOn:
      - BuildFrontend
    Inputs:
      Sources:
        - WorkflowSource
    Configuration:
      Steps:
            - Run: echo "Running frontend tests..."
            - Run: cd frontend
            - Run: npm install
            - Run: npm test -- --watchAll=false --coverage --passWithNoTests || echo "Tests completed with warnings"

  # Security Scan
  SecurityScan:
    Identifier: aws/managed-test@v1
    DependsOn:
      - BuildBackend
      - BuildFrontend
    Inputs:
      Sources:
        - WorkflowSource
    Configuration:
      Steps:
            - Run: echo "Running security scans..."
            - Run: cd backend
            - Run: pip install bandit safety || echo "Security tools installed"
            - Run: bandit -r app/ -f json -o bandit-report.json || echo "Bandit scan completed"
            - Run: safety check --json --output safety-report.json || echo "Safety scan completed"
            - Run: cd ../frontend
            - Run: npm audit --audit-level moderate || echo "NPM audit completed"
            - Run: echo "Security scans completed"
            - Run: echo "Running Deployment Script"

  DeployApplication:
    Compute:
      Type: Ec2
      Fleet: Linux.x86-64.Large
    Identifier: aws/build@v1
    DependsOn:
        - SecurityScan
    Environment:
      Name: production
    Inputs:
      Sources:
        - WorkflowSource
    Configuration:
      Steps:
            - Run: cd scripts
            - Run: chmod +x test_deploy.sh
            - Run: ./test_deploy.sh
            - Run: chmod -x test_deploy.sh
            